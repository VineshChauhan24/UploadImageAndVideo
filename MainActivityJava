
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Color;
import android.media.MediaPlayer;
import android.net.Uri;
import android.provider.MediaStore;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.VideoView;
import com.bumptech.glide.Glide;
import com.sangcomz.fishbun.FishBun;
import com.sangcomz.fishbun.adapter.image.impl.GlideAdapter;
import com.sangcomz.fishbun.define.Define;
import java.io.File;
import java.util.ArrayList;
import okhttp3.MediaType;
import okhttp3.MultipartBody;
import okhttp3.RequestBody;
import retrofit2.Call;
import retrofit2.Callback;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class MainActivity extends AppCompatActivity {
    public static String[] ImageForUpload;
    public static String VideoForUpload;
    public static boolean ISVIDEOFORUPLOAD, ISIMAGEFORUPLOAD;

    VideoView video_view;
    ImageView image_1, image_2 , image_3, image_4, image_5;
    String selectedVideoPath;
    private static final int SELECT_VIDEO = 1;
    WebServicesAPI api;
    Retrofit builder;

    TextView textview;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        builder = new Retrofit.Builder().baseUrl("http://00.00.00.00:0000/").addConverterFactory(GsonConverterFactory.create()).build();
        api = builder.create(WebServicesAPI.class);
        textview = (TextView) findViewById(R.id.textview);
        video_view = (VideoView) findViewById(R.id.video_view);
        image_1 = (ImageView) findViewById(R.id.image_1);
        image_2 = (ImageView) findViewById(R.id.image_2);
        image_3 = (ImageView) findViewById(R.id.image_3);
        image_4 = (ImageView) findViewById(R.id.image_4);
        image_5 = (ImageView) findViewById(R.id.image_5);

    }
    public void callVideoIntent(View view) {
        Intent i = new Intent(Intent.ACTION_PICK, android.provider.MediaStore.Video.Media.EXTERNAL_CONTENT_URI);
        startActivityForResult(i, SELECT_VIDEO);
    }

    public void callGalleryIntent(View view) {
        FishBun.with(MainActivity.this)
                .setImageAdapter(new GlideAdapter())
                .setIsUseDetailView(false)
                .setMaxCount(5)
                .setMinCount(1)
                .setActionBarColor(Color.parseColor("#3F51B5"), Color.parseColor("#303F9F"), false)
                .setActionBarTitleColor(Color.parseColor("#ffffff"))
                .setAlbumSpanCount(2, 4)
                .setButtonInAlbumActivity(false)
                .setCamera(true)
                .setAllViewTitle("All")
                .setActionBarTitle("Image Library")
                .textOnImagesSelectionLimitReached("Limit Reached!")
                .textOnNothingSelected("Nothing Selected")
                .startAlbum();
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (resultCode == RESULT_OK) {
            if (requestCode == SELECT_VIDEO) {
                selectedVideoPath = getPath(data.getData());
                try {
                    if(selectedVideoPath == null) {
                        ISVIDEOFORUPLOAD = false;
                        Log.d("selectedPa", "selectedVideoPath : "+"Null");
                        Toast.makeText(this, "Sorry Something went wrong.", Toast.LENGTH_SHORT).show();
                    } else {
                        Uri video = Uri.parse(""+selectedVideoPath);
                        video_view.setVideoURI(video);
                        VideoForUpload = String.valueOf(video);
                        ISVIDEOFORUPLOAD = true;
                        video_view.setOnPreparedListener(new MediaPlayer.OnPreparedListener() {
                            @Override
                            public void onPrepared(MediaPlayer mp) {
                                mp.setLooping(true);
                                video_view.start();
                            }
                        });
                        textview.setText(textview.getText().toString()+"\n"+selectedVideoPath);
                        Log.d("selectedPa", "selectedVideoPath : "+selectedVideoPath);
                      }
                } catch (Exception e) {

                }
            } else if(requestCode == Define.ALBUM_REQUEST_CODE){
                ArrayList<Uri> path = data.getParcelableArrayListExtra(Define.INTENT_PATH);

                if(path == null || path.isEmpty()){
                    ISIMAGEFORUPLOAD = false;
                }else{
                    ISIMAGEFORUPLOAD = true;
                ImageForUpload = new String[path.size()];

                int j =0;
                for(int i=0; i<path.size(); i++) {
                    String mPath = getPath(path.get(i));
                    textview.setText(" " + textview.getText() + "\n" + mPath);
                    if (i == 0) {
                        Glide.with(MainActivity.this).load(mPath).into(image_1);
                        ImageForUpload[j] = mPath;
                        j++;
                    }
                    if (i == 1) {
                        Glide.with(MainActivity.this).load(mPath).into(image_2);
                        ImageForUpload[j] = mPath;
                        j++;
                    }
                    if (i == 2) {
                        Glide.with(MainActivity.this).load(mPath).into(image_3);
                        ImageForUpload[j] = mPath;
                        j++;
                    }
                    if (i == 3) {
                        Glide.with(MainActivity.this).load(mPath).into(image_4);
                        ImageForUpload[j] = mPath;
                        j++;
                    }
                    if (i == 4) {
                        Glide.with(MainActivity.this).load(mPath).into(image_5);
                        ImageForUpload[j] = mPath;
                        j++;
                    }
                }
                }
            }
        }
    }
    public String getPath(Uri uri) {
        String[] projection = { MediaStore.Images.Media.DATA };
        Cursor cursor = managedQuery(uri, projection, null, null, null);
        if(cursor!=null) {
            int column_index = cursor.getColumnIndexOrThrow(MediaStore.Video.Media.DATA);
            cursor.moveToFirst();
            return cursor.getString(column_index);
        }
        else return null;
    }
    public void uploadDataToServer(View view) {
        if(ISIMAGEFORUPLOAD) {
            callUploadImages(ImageForUpload);
        }
        else if(ISVIDEOFORUPLOAD) {
            callUploadSingleVideo(VideoForUpload);
        }
    }

    private void callUploadImages(String[] realUri) {
        MultipartBody.Part[] images;
        RequestBody[] requestBody;
        File[] imageFIle;
        ArrayList<String> ImagefilePaths = new ArrayList<>(realUri.length);
        imageFIle = new File[realUri.length];
        requestBody = new RequestBody[realUri.length];
        for(int i=0; i<realUri.length; i++) {
            ImagefilePaths.add(realUri[i]);
            imageFIle[i] = new File(String.valueOf(realUri[i]));
            requestBody[i] = RequestBody.create(MediaType.parse("multipart/form-data"),imageFIle[i]);
        }
        images = new MultipartBody.Part[ImagefilePaths.size()];

        for (int index = 0; index < ImagefilePaths.size(); index++) {
            images[index] = MultipartBody.Part.createFormData("file" + (index + 1), ImagefilePaths.get(index), requestBody[index]);
        }
         Call<ResponseLoadimagesmultipleToWildBook> call = api.mLoadimagesmultipleToWildBook(images, "field1", "field2", "field3", "field4","field5");
        call.enqueue(new Callback<ResponseLoadimagesmultipleToWildBook>() {
            @Override
            public void onResponse(Call<ResponseLoadimagesmultipleToWildBook> call, Response<ResponseLoadimagesmultipleToWildBook> response) {
                ResponseLoadimagesmultipleToWildBook body = response.body(); //get body from response.
               AlertDialog.Builder alert = new AlertDialog.Builder(MainActivity.this);
                alert.setMessage(body.getStatus()); //display response in Alert dialog.
                alert.setPositiveButton("OK", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        if(ISVIDEOFORUPLOAD) {
                            callUploadSingleVideo(VideoForUpload);
                        }
                    }
                });
                alert.show();
            }

            @Override
            public void onFailure(Call<ResponseLoadimagesmultipleToWildBook> call, Throwable t) {
                Toast.makeText(MainActivity.this, "Failed "+t.getMessage(), Toast.LENGTH_SHORT).show();
            }
        });
    }
    private void callUploadSingleVideo(String realUri) {
        File videoFIle = new File(String.valueOf(realUri));
        RequestBody requestBody = RequestBody.create(MediaType.parse("multipart/form-data"),videoFIle);
        MultipartBody.Part video = MultipartBody.Part.createFormData("file", videoFIle.getName(),requestBody);
        Call<ResponseLoadVideoToWildBook> call = api.loadvideoToWildBook(video,  "field1", "field2", "field3", "field4","field5");
        call.enqueue(new Callback<ResponseLoadVideoToWildBook>() {
            @Override
            public void onResponse(Call<ResponseLoadVideoToWildBook> call, Response<ResponseLoadVideoToWildBook> response) {
                ResponseLoadVideoToWildBook body = response.body();
                AlertDialog.Builder alert = new AlertDialog.Builder(MainActivity.this);
                alert.setMessage(body.getStatus()); //display response in Alert dialog.
                alert.setPositiveButton("OK", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                    }
                });
                alert.show();
            }
            @Override
            public void onFailure(Call<ResponseLoadVideoToWildBook> call, Throwable t) {
                Toast.makeText(MainActivity.this, "Failed to upload Video "+t.getMessage(), Toast.LENGTH_SHORT).show();

            }
        });
    }
    private void callUploadSingleImage(String realUri) {
        File imageFIle = new File(String.valueOf(realUri));
        RequestBody requestBody = RequestBody.create(MediaType.parse("multipart/form-data"),imageFIle);
        MultipartBody.Part image = MultipartBody.Part.createFormData("file1", imageFIle.getName(),requestBody);
        Call<ResponseLoadimagesmultipleToWildBook> call = api.mLoadimageToWildBook(image, "field1", "field2", "field3", "field4","field5");
        call.enqueue(new Callback<ResponseLoadimagesmultipleToWildBook>() {
            @Override
            public void onResponse(Call<ResponseLoadimagesmultipleToWildBook> call, Response<ResponseLoadimagesmultipleToWildBook> response) {
                ResponseLoadimagesmultipleToWildBook body = response.body();
                AlertDialog.Builder alert = new AlertDialog.Builder(MainActivity.this);
                alert.setMessage(body.getStatus());
                alert.setPositiveButton("OK", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                    }
                });
                alert.show();
            }

            @Override
            public void onFailure(Call<ResponseLoadimagesmultipleToWildBook> call, Throwable t) {

            }
        });
    }
}
